{
  "designerVersion" : "1.9.53",
  "id" : "customNavegador",
  "name" : "Navegador",
  "lastUpdate" : 1590481856436,
  "template" : "<!-- The custom widget template is defined here\n   - You can use standard HTML tags and AngularJS built-in directives, scope and interpolation system\n   - Custom widget properties defined on the right can be used as variables in a templates with properties.newProperty\n   - Functions exposed in the controller can be used with ctrl.newFunction()\n   - You can use the 'environment' property injected in the scope when inside the Editor whiteboard. It allows to define a mockup\n     of the Custom Widget to be displayed in the whiteboard only. By default the widget is represented by an auto-generated icon\n     and its name (See the <span> below).\n-->\n \n<span ng-if=\"environment\"><identicon name=\"{{environment.component.id}}\" size=\"30\" background-color=\"[255,255,255, 0]\" foreground-color=\"[51,51,51]\"></identicon> {{environment.component.name}}</span>\n\n<div style=\"color: {{ properties.color }}; background-color: {{ backgroudColor }}\" ng-click=\"ctrl.toggleBackgroundColor()\">\n    <h1 id=\"123\">hola</h1>\n</div>",
  "controller" : "/**\n * The controller is a JavaScript function that augments the AngularJS scope and exposes functions that can be used in the custom widget template\n * \n * Custom widget properties defined on the right can be used as variables in a controller with $scope.properties\n * To use AngularJS standard services, you must declare them in the main function arguments.\n * \n * You can leave the controller empty if you do not need it.\n */\nfunction ($scope) {\n    document.getElementById(\"123\").innerHTML = HOLAALLALALA;\n    // define a function to be used in template with ctrl.toggleBackgroundColor()\n    for(var dir in $scope.properties.listaDirectorios){\n        var button = '<input type=\"submit\" value=\"'+ dir +'\" id=\"wgbtn'+ dir +'\" name=\"'+ dir +'\" onClick=actualizarDirectorio('+dir+')/>';\n        $('form').append(button);\n    }\n    \n    this.actualizarDirectorio = function(dir) {\n        $scope.properties.directorioActual = $scope.properties.directorioActual + \"/\" + dir\n    };\n}",
  "custom" : true,
  "properties" : [ {
    "label" : "Directorio actual",
    "name" : "directorioActual",
    "type" : "text",
    "bond" : "variable"
  }, {
    "label" : "Directorios de la carpeta actual",
    "name" : "listaDirectorios",
    "type" : "text",
    "bond" : "variable"
  } ],
  "assets" : [ ],
  "requiredModules" : [ ],
  "type" : "widget",
  "hasHelp" : false
}